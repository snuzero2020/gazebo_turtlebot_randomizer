#!/usr/bin/env python
from string import Template
import numpy as np
import rospy
from geometry_msgs.msg import Pose, Point, Quaternion
from std_msgs.msg import Int32
from gazebo_msgs.srv import SpawnModel, SpawnModelRequest
from gazebo_msgs.srv import DeleteModel, DeleteModelRequest
from gazebo_msgs.srv import SetModelState, SetModelStateRequest
from tf.transformations import quaternion_from_euler
import math
import random
import time


PI = math.pi

class TargetRandomizer:
    def __init__(self, position_range, orientation_range,
                 gazebo_ns='/gazebo'):
        self._sdf_temp = Template(_obj_sdf)
        self._spawn_model = rospy.ServiceProxy(gazebo_ns + '/spawn_sdf_model', SpawnModel)
        self._set_model = rospy.ServiceProxy(gazebo_ns + '/set_model_state', SetModelState)
        self._spawned_objs = set()
        self._position_range = position_range
        self._orientation_range = orientation_range
        self._pub_sign = rospy.Publisher("/collection_sign", Int32 , queue_size = 1)
        self._index = 0
        self._spawned = False

    def callback(self, event):
        rospy.loginfo(self._spawned_objs)
        self._index = self._index + 1
        for obj_name in self._spawned_objs:
            req = SetModelStateRequest()
            req.model_state.model_name = obj_name
            r = random.uniform(self._orientation_range['r']['min'], self._orientation_range['r']['max'])
            p = random.uniform(self._orientation_range['p']['min'], self._orientation_range['p']['max'])
            y = random.uniform(self._orientation_range['y']['min'], self._orientation_range['y']['max'])
            q = quaternion_from_euler(r,p,y)
            req.model_state.pose = Pose(position=Point(*np.random.uniform([self._position_range['x']['min'],
                                                                       self._position_range['y']['min'],
                                                                       self._position_range['z']['min']],
                                                                      [self._position_range['x']['max'],
                                                                       self._position_range['y']['max'],
                                                                       self._position_range['z']['max']])),
                                                                       orientation=Quaternion(q[0],q[1],q[2],q[3]))
            try:
                res = self._set_model(req)
                if not res.success:
                    rospy.logwarn(res.status_message)
            except:
                #rospy.logerr("Service call failed: %s" %e)
                pass
            self._pub_sign.publish(self._index)
            """
            try:
                self._delete_model(DeleteModelRequest(obj_name))
            except:
                pass
            """
        rospy.sleep(2)
        if self._spawned:
            print('skip')
            return
        target_no = 1
        for i in range(target_no):
            req=SpawnModelRequest()
            obj_name = 'tar' + str(i) + '_' + obj_type
            req.model_name=obj_name
            ##shape_sdf = _target_list[obj_type].substitute()
            ##req.model_xml = self._sdf_temp.substitute(model_name=obj_name,
            ##                                          obj_shape=shape_sdf)
            
            req.model_xml = self._sdf_temp.substitute()
            r = random.uniform(self._orientation_range['r']['min'], self._orientation_range['r']['max'])
            p = random.uniform(self._orientation_range['p']['min'], self._orientation_range['p']['max'])
            y = random.uniform(self._orientation_range['y']['min'], self._orientation_range['y']['max'])
            q = quaternion_from_euler(r,p,y)
            req.initial_pose = Pose(position=Point(*np.random.uniform([self._position_range['x']['min'],
                                                                       self._position_range['y']['min'],
                                                                       self._position_range['z']['min']],
                                                                      [self._position_range['x']['max'],
                                                                       self._position_range['y']['max'],
                                                                       self._position_range['z']['max']])),
                                                                       orientation=Quaternion(q[0],q[1],q[2],q[3]))
            
            #q = quaternion_from_euler(PI/2,0,0)
            #req.initial_pose = Pose(position= Point(0,0,3.5), orientation=Quaternion(q[0],q[1],q[2],q[3]))
            #req.initial_pose = Pose(position=Point(0,0,0))
            rospy.logdebug("Spawn model sdf: "+req.model_xml)
            try:
                res = self._spawn_model(req)
                if not res.success:
                    rospy.logwarn(res.status_message)
                else:
                    self._spawned_objs.add(obj_name)
            except:
                #rospy.logerr("Service call failed: %s" %e)
                pass
        rospy.sleep(3)
        self._pub_sign.publish(self._index)
        self._spawned = True


if __name__ == "__main__":
    import argparse
    from std_msgs.msg import Empty
    parser = argparse.ArgumentParser(description='Target randomizer')
    parser.add_argument('-d', '--duration', type=float, default=2.0, help='Timer duration.')
    parser.add_argument('--gazebo_ns', type=str, default='/gazebo', help='Gazebo namespace.')
    parser.add_argument('-e', '--event_mode', type=str, default='timer', choices=['timer', 'trigger'], help='Timer duration.')
    args = parser.parse_args(rospy.myargv()[1:])

    rospy.init_node("targets_randomizer")
    position_range = {}
    orientation_range = {}
    position_range['x'] = rospy.get_param("~position_range/x", {'min': -4, 'max': -2})
    position_range['y'] = rospy.get_param("~position_range/y", {'min': -4, 'max': -2})
    position_range['z'] = rospy.get_param("~position_range/z", {'min': 4.0, 'max': 5.5})
    orientation_range['r'] = rospy.get_param("~orientation_range/r", {'min': 0, 'max': 0})
    orientation_range['p'] = rospy.get_param("~orientation_range/p", {'min': PI/6, 'max': 2*PI/3})
    orientation_range['y'] = rospy.get_param("~orientation_range/y", {'min': -PI/6, 'max': 2*PI/3})
    randomizer = TargetRandomizer(position_range, orientation_range, gazebo_ns=args.gazebo_ns)
    if args.event_mode == 'timer':
        rospy.Timer(rospy.Duration(args.duration), randomizer.callback)
    elif args.event_mode == 'trigger':
        rospy.Subscriber('randomizer/trigger', Empty, randomizer.callback)
    else:
        raise ValueError('Unknown event_mode: %s' % args.event_mode)
    rospy.spin()
